let arr = [1,2,3,43,[5454,[45]],88]
let arr1 = ['131','','dfdfd','dfdsfsd','dfdfdhghj']
//[] - необязательные параметры для метода можно жить и без них

// 1) arr.at(index) - возвращает элемент массива по значению указанному в скобках - (index)

// 2) arr1.concat.arr2 || (arr2,arr3) - конкатенация двух массивов - копирует ссылки массивов в новый объект - если будет изменен первоначальный объект то и конкатенированный будет изменен

// 3) arr.copyWithin(target, start, [end = arr.length]) - копирует массивы по индексам указанным с start по end - не включая его в копируемый список и вставляет скопированный массив на место target - index массива куда копируется элемент

// 4) arr.entries() - возвращает index-значение массива, сам по себе не работает, закидываем его в переменную и используем с .next().value - по мне абсолютно бесполезная хуйня

// 5) arr.every(callback(currentValue[, index[, array]])[, thisArg]) - проверка массива по условию содержащемуся в callback, CurrentValue - текущий обрабатываемый элемент массива, index - индекс конкретного элемента массива, array - обрабатываемый массив - неонятно зачем, он уже есть, this.arg - значение используещееся в качестве this - я так понимаю для вписанного в массив объекта.

// 6) arr.fill(value[, start = 0[, end = this.length]]) -  метод заполняющий массив одним и тем же значением. Value - значение которым мы заполняем массив. start - индекс массива с которого мы начинаем заполнять массив value. end - индекс последнего элемента массива который мы заполним значением value. Работает лишь при условии того, что массив не пустой и заолняет не больше чем длинна массива.

// 7) arr.fillter((element, index, array) => { ... }, thisArg) - создает новый массив со всеми элементами массива которые прошли проверки которая передается либо стрелочной функцией либо callback, в случае если ни один элемент не подходит возвращает пустой массив. element - текущий обрабатываемый элемент массива. НЕОБЯЗАТЕЛЬНЫЕ: index - индекс текущего обрабатываемого элемента массива. array - обрабатываемый массив на котором был вызван метод filter. thisArg - значение используемое в качестве this при вызове функции.

// 8) arr.find((element, index, array) => {...}, thisArg) - возвращает первое значение элемента прошедшего проверку, если нет то возвращает undefined не изменяет массив. element - текущий обрабатываемый элемент массива. НЕОБЯЗАТЕЛЬНЫЕ: index - индекс текущего обрабатываемого элемента массива. array - обрабатываемый массив на котором был вызван метод. thisArg - значение используемое в качестве this при вызове функции.

// 9) arr.findIndex((element, index, array) => {...}, thisArg) - возвращает индекс первого элемента значение которого прошло проверку, если нет то возвращает undefined не изменяет массив. element - текущий обрабатываемый элемент массива. НЕОБЯЗАТЕЛЬНЫЕ: index - индекс текущего обрабатываемого элемента массива. array - обрабатываемый массив на котором был вызван метод. thisArg - значение используемое в качестве this при вызове функции.

// 10) arr.findLast((element, index, array) => {...}, thisArg) - возвращает последний элемент значение которого прошло проверку, если нет то возвращает undefined не изменяет массив. element - текущий обрабатываемый элемент массива. НЕОБЯЗАТЕЛЬНЫЕ: index - индекс текущего обрабатываемого элемента массива. array - обрабатываемый массив на котором был вызван метод. thisArg - значение используемое в качестве this при вызове функции.

// 11) arr.findLastIndex((element, index, array) => {...}, thisArg) - возвращает индекс последнего элемента значение которого прошло проверку, если нет то возвращает undefined не изменяет массив. element - текущий обрабатываемый элемент массива. НЕОБЯЗАТЕЛЬНЫЕ: index - индекс текущего обрабатываемого элемента массива. array - обрабатываемый массив на котором был вызван метод. thisArg - значение используемое в качестве this при вызове функции.

// 12) arr.flat(depth) - метод возвращающий новый массив убирая из него некое колличество уровней вложенности. depth - количество уровней вложенности на которые необходимо поднять емены массива. Значение depth - Infinity - бесконечность, убирвет любу. вложенность в массиве, несмотря на то насколько вложены элементы массива друг в друга. Также удаляет 'дырки в массивах' - ' '.

// 13) arr.flatMap(function callback(element[, index[, array]]) {}[, thisArg] - компоновка flat и map - возвращает новый массив применяя к каждому элементу callback и убирает в нем один уровень вложенности. element - текущий обрабатываемый элемент массива. НЕОБЯЗАТЕЛЬНЫЕ: index - индекс текущего обрабатываемого элемента массива. array - обрабатываемый массив на котором был вызван метод. thisArg - значение используемое в качестве this при вызове функции.

// 14) arr.forEach(function callback(element, index, array) {}[, thisArg]) - перебирает каждый элемент массива, не создает новый и не изменяет старый, и возвращает значение undefined. element - текущий обрабатываемый элемент массива. НЕОБЯЗАТЕЛЬНЫЕ: index - индекс текущего обрабатываемого элемента массива. array - обрабатываемый массив на котором был вызван метод. thisArg - значение используемое в качестве this при вызове функции.

// 15) Array.from(arrayLike[, mapFn[, thisArg]]) - метод позволяющий преобразовать масивоподобный или итерируемый объект в массив.  arrayLike - то что нужно преобразовать в массив. НЕОБЯЗАТЕЛЬНО: mapFn - встроенный map для перебора элементов при преобразовании. thisArg - значение используемое в качестве this при вызове функции.

// 16) group(function (element, index, array) {}, thisArg)

// 17) groupToMap(function (element, index, array) {}, thisArg)

// 18) arr.includes(searchElement[fromIndex = 0]) - поиск элемента по массиву - возвращает булево значение. searchElement - значение которое мы будем искать в массиве. НЕОБЯЗАТЕЛЬНО: fromIndex- значение индекса с которого мы будем производить поиск.

// 19) arr.indexOf(searchElement[, fromIndex = 0]) - поиск элемента по массиву и строгое сравнение - возвращает первый индекс элемента - Если такого элемента нет возвращает -1. earchElement - значение которое мы будем искать в массиве. НЕОБЯЗАТЕЛЬНО: fromIndex- значение индекса с которого мы будем производить поиск.

// 20) фк

var indices = [];
var array = ['a', 'b', 'a', 'c', 'a', 'd'];
var element = 'a';
var idx = array.indexOf(element);
// while (idx != -1) {
//     console.log(idx)
//   indices.push(idx);
//   idx = array.indexOf(element, idx + 1);
// }
while(idx != -1){
    console.log(idx)
}
console.log(indices);
// [0, 2, 4]